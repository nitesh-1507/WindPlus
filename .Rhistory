lines(density(test1[[2]][,6]))
plot(density(test1[[1]][,13]))
lines(density(test1[[2]][,13]))
data2 = read.csv('F:/goldwind_averaged/Turbine50.csv')
data1 = read.csv('F:/goldwind_averaged/Turbine35.csv')
dname = rep(list(c), 2)
dname[[1]] = data1
dname[[2]] = data2
test1 = covmatch.binary(dname = dname, weight = c(0.1, 0.1, 0.05),cov = c(6, 1, 13), cov_circ = NULL)
plot(density(test1[[1]][,13]))
lines(density(test1[[2]][,13]))
plot(density(data1[, 13]))
lines(density(data2[, 13]))
plot(density(test1[[1]][,13]))
lines(density(test1[[2]][,13]))
test1 = covmatch.binary(dname = dname, weight = c(0.1, 0.1, 0.01),cov = c(6, 1, 13), cov_circ = NULL)
plot(density(test1[[1]][,13]))
lines(density(test1[[2]][,13]))
plot(density(test1[[1]][,6]))
lines(density(test1[[2]][,6]))
plot(density(data1[, 6]))
lines(density(data2[, 6]))
plot(density(test1[[1]][,6]))
lines(density(test1[[2]][,6]))
plot(density(test1[[1]][,1]))
lines(density(test1[[2]][,1]))
plot(density(data1[, 1]))
lines(density(data2[, 1]))
data2 = read.csv('F:/goldwind_averaged/Turbine50.csv')
data1 = read.csv('F:/goldwind_averaged/Turbine34.csv')
dname = rep(list(c), 2)
dname[[1]] = data1
dname[[2]] = data2
test1 = covmatch.binary(dname = dname, weight = c(0.1, 0.1, 0.01),cov = c(6, 1, 13), cov_circ = NULL)
plot(density(test1[[1]][,1]))
lines(density(test1[[2]][,1]))
plot(density(data1[, 1]))
lines(density(data2[, 1]))
plot(density(test1[[1]][,6]))
lines(density(test1[[2]][,6]))
plot(density(data1[, 6]))
lines(density(data2[, 6]))
plot(density(test1[[1]][,13]))
lines(density(test1[[2]][,13]))
plot(density(data1[, 13]))
lines(density(data2[, 13]))
test1 = covmatch.binary(dname = dname, weight = c(0.1, 0.1, 0.05),cov = c(6, 1, 13), cov_circ = NULL)
plot(density(test1[[1]][,13]))
lines(density(test1[[2]][,13]))
plot(density(data1[, 13]))
lines(density(data2[, 13]))
plot(density(test1[[1]][,13]))
lines(density(test1[[2]][,13]))
plot(density(test1[[1]][,6]))
lines(density(test1[[2]][,6]))
plot(density(test1[[1]][,6]))
lines(density(test1[[2]][,6]))
plot(density(data1[, 6]))
lines(density(data2[, 6]))
plot(density(test1[[1]][,6]))
lines(density(test1[[2]][,6]))
plot(density(data1[, 6]))
lines(density(data2[, 6]))
data2 = read.csv('F:/goldwind_averaged/Turbine50.csv')
data1 = read.csv('F:/goldwind_averaged/Turbine34.csv')
dname = rep(list(c), 2)
dname[[1]] = data1
dname[[2]] = data2
id.cov = c(6, 1, 13)
wgt = c(0.1, 0.2)
data1 = read.csv('F:/seasonality/data1.csv')
data2 = read.csv('F:/seasonality/data2.csv')
data3 = read.csv('F:/seasonality/data3.csv')
dname = rep(list(), 3)
dname[[1]] = data1
dname[[1]] = data1
dname[[2]] = data2
dname[[3]] = data3
View(data1)
test1 = covmatch.mult(dname = dname, weight = c(0.2, 0.2, 0.2),cov = c(1, 6, 14), cov_circ = NULL)
library(WindPlus)
test1 = covmatch.mult(dname = dname, weight = c(0.2, 0.2, 0.2),cov = c(1, 6, 14), cov_circ = NULL)
plot(density(test1[[1]][,6]))
lines(density(test1[[2]][,6]))
lines(density(test1[[3]][,6]))
plot(density(data1[, 6]))
lines(density(data2[, 6]))
plot(density(data1[, 6]))
lines(density(data2[, 6]))
lines(density(data3[,6]))
plot(density(test1[[1]][,1]))
lines(density(test1[[2]][,1]))
lines(density(test1[[3]][,1]))
plot(density(data1[, 1]))
lines(density(data2[, 1]))
lines(density(data3[,1]))
plot(density(test1[[1]][,14]))
lines(density(test1[[2]][,14]))
lines(density(test1[[3]][,14]))
plot(density(data1[, 14]))
lines(density(data2[, 14]))
lines(density(data3[,14]))
library(WindPlus)
# Prepare data set for matching
dname = rep(list(), 3)
dname[[1]] = data1
dname[[2]] = data2
dname[[3]] = data3
# Non circular covariates
cov = c(1, 6, 14)
# Weight
weight = c(0.2, 0.2, 0.2)
# Matching
matched = covmatch.mult(dname = dname, weight = weight, cov = cov, cov_circ = NULL)
# Commpare result with original data
plot(density(dname[[1]][, 1]), xlab = 'Wind_speed', title = 'Before_matching')
# Commpare result with original data
plot(density(dname[[1]][, 1]), col = 'red')
lines(density(dname[[2]][,2], col = 'blue'))
# Commpare result with original data
plot(density(dname[[1]][, 1]), col = 'red')
lines(density(dname[[2]][,1]), col = 'blue')
lines(density(dname[[3]][,1]), col = 'green')
title(main = 'Before Matching'), xlab = 'Wind Speed')
title(main = 'Before Matching', xlab = 'Wind Speed')
# Commpare result with original data
plot(density(dname[[1]][, 1]), col = 'red', main = 'Before Matching', xlab = 'Wind Speed')
lines(density(dname[[2]][,1]), col = 'blue')
lines(density(dname[[3]][,1]), col = 'green')
# Commpare result of one covariate with original data
par(mfrow =  c(1, 2))
plot(density(dname[[1]][, 1]), col = 'red', main = 'Before Matching', xlab = 'Wind Speed')
lines(density(dname[[2]][,1]), col = 'blue')
lines(density(dname[[3]][,1]), col = 'green')
# Commpare result of one covariate with original data
par(mfrow =  c(1, 2))
plot(density(dname[[1]][, 1]), col = 'red', main = 'Before Matching', xlab = 'Wind Speed (m/s)')
lines(density(dname[[2]][,1]), col = 'blue')
lines(density(dname[[3]][,1]), col = 'green')
# Commpare result of one covariate with original data
par(mfrow =  c(1, 2))
par(bg = 'grey')
plot(density(dname[[1]][, 1]), col = 'red', main = 'Before Matching', xlab = 'Wind Speed (m/s)')
lines(density(dname[[2]][,1]), col = 'blue')
lines(density(dname[[3]][,1]), col = 'green')
# Commpare result of one covariate with original data
par(mfrow =  c(1, 2))
par(bg = 'grey')
grid()
plot(density(dname[[1]][, 1]), col = 'red', main = 'Before Matching', xlab = 'Wind Speed (m/s)')
lines(density(dname[[2]][,1]), col = 'blue')
lines(density(dname[[3]][,1]), col = 'green')
# Commpare result of one covariate with original data
par(mfrow =  c(1, 2))
par(bg = 'black')
grid()
plot(density(dname[[1]][, 1]), col = 'red', main = 'Before Matching', xlab = 'Wind Speed (m/s)')
lines(density(dname[[2]][,1]), col = 'blue')
lines(density(dname[[3]][,1]), col = 'green')
# Commpare result of one covariate with original data
par(mfrow =  c(1, 2))
par(bg = 'brown')
grid()
plot(density(dname[[1]][, 1]), col = 'red', main = 'Before Matching', xlab = 'Wind Speed (m/s)')
lines(density(dname[[2]][,1]), col = 'blue')
lines(density(dname[[3]][,1]), col = 'green')
# Commpare result of one covariate with original data
par(mfrow =  c(1, 2))
par(bg = 'dark grey')
grid()
plot(density(dname[[1]][, 1]), col = 'red', main = 'Before Matching', xlab = 'Wind Speed (m/s)')
lines(density(dname[[2]][,1]), col = 'blue')
lines(density(dname[[3]][,1]), col = 'green')
# Commpare result of one covariate with original data
par(mfrow =  c(1, 2))
par(bg = 'dark grey')
plot(density(dname[[1]][, 1]), col = 'red', main = 'Before Matching', xlab = 'Wind Speed (m/s)')
lines(density(dname[[2]][,1]), col = 'blue')
lines(density(dname[[3]][,1]), col = 'green')
legend(legend = c('Season1', 'Season2', 'Season3'), col = c('red','blue','green'))
legend(17, 0.12,legend = c('Season1', 'Season2', 'Season3'), col = c('red','blue','green'))
legend(12, 0.12,legend = c('Season1', 'Season2', 'Season3'), col = c('red','blue','green'))
legend(12, 0.12,legend = c('Season1', 'Season2', 'Season3'), col = c('red','blue','green'), box.lty=0)
legend('topright',legend = c('Season1', 'Season2', 'Season3'), col = c('red','blue','green'), box.lty=0)
# Commpare result of one covariate with original data
par(mfrow =  c(1, 2))
par(bg = 'dark grey')
plot(density(dname[[1]][, 1]), col = 'red', main = 'Before Matching', xlab = 'Wind Speed (m/s)')
lines(density(dname[[2]][,1]), col = 'blue')
lines(density(dname[[3]][,1]), col = 'green')
legend('topright',legend = c('Season1', 'Season2', 'Season3'), col = c('red','blue','green'), box.lty=0)
# Commpare result of one covariate with original data
par(mfrow =  c(1, 2))
par(bg = 'dark grey')
plot(density(dname[[1]][, 1]), col = 'red', main = 'Before Matching', xlab = 'Wind Speed (m/s)')
lines(density(dname[[2]][,1]), col = 'blue')
lines(density(dname[[3]][,1]), col = 'green')
legend('topright',legend = c('Season1', 'Season2', 'Season3'), col = c('red','blue','green'))
# Commpare result of one covariate with original data
par(mfrow =  c(1, 2))
plot(density(dname[[1]][, 1]), col = 'red', main = 'Before Matching', xlab = 'Wind Speed (m/s)')
lines(density(dname[[2]][,1]), col = 'blue')
lines(density(dname[[3]][,1]), col = 'green')
legend('topright',legend = c('Season1', 'Season2', 'Season3'), col = c('red','blue','green'))
# Commpare result of one covariate with original data
par(mfrow =  c(1, 2))
plot(density(dname[[1]][, 1]), col = 'red', main = 'Before Matching', xlab = 'Wind Speed (m/s)')
lines(density(dname[[2]][,1]), col = 'blue')
lines(density(dname[[3]][,1]), col = 'green')
legend('topright',legend = c('Season1', 'Season2', 'Season3'), col=c("red", "blue")))
legend('topright',legend = c('Season1', 'Season2', 'Season3'), col=c("red", "blue"))
# Commpare result of one covariate with original data
par(mfrow =  c(1, 2))
par(bg = 'white')
plot(density(dname[[1]][, 1]), col = 'red', main = 'Before Matching', xlab = 'Wind Speed (m/s)')
lines(density(dname[[2]][,1]), col = 'blue')
lines(density(dname[[3]][,1]), col = 'green')
legend('topright',legend = c('Season1', 'Season2', 'Season3'), col=c("red", "blue"))
legend('topright',legend = c('Season1', 'Season2', 'Season3'), col=c("red", "blue"), lty=1)
# Commpare result of one covariate with original data
par(mfrow =  c(1, 2))
par(bg = 'grey')
plot(density(dname[[1]][, 1]), col = 'red', main = 'Before Matching', xlab = 'Wind Speed (m/s)')
lines(density(dname[[2]][,1]), col = 'blue')
lines(density(dname[[3]][,1]), col = 'green')
legend('topright',legend = c('Season1', 'Season2', 'Season3'), col=c("red", "blue"), lty=1)
plot(density(matched[[1]][, 1]), col = 'red', main = 'After Matching', xlab = 'Wind Speed (m/s)')
lines(density(matched[[2]][,1]), col = 'blue')
lines(density(matched[[3]][,1]), col = 'green')
legend('topright',legend = c('Season1', 'Season2', 'Season3'), col=c("red", "blue"), lty=1)
library(usethis)
data1 = read.csv('F:/seasonality/data1.csv')
data2 = read.csv('F:/seasonality/data2.csv')
data3 = read.csv('F:/seasonality/data3.csv')
# Prepare data set for matching
dname = rep(list(), 3)
dname[[1]] = data1
dname[[2]] = data2
dname[[3]] = data3
# Non circular covariates column
cov = c(1, 6, 14)
# Weight
weight = c(0.2, 0.2, 0.2)
# Matching
matched = covmatch.mult(dname = dname, weight = weight, cov = cov, cov_circ = NULL)
# Commpare result of one covariate with original data
par(mfrow =  c(1, 2))
par(bg = 'grey')
plot(density(dname[[1]][, 1]), col = 'red', main = 'Before Matching', xlab = 'Wind Speed (m/s)')
lines(density(dname[[2]][,1]), col = 'blue')
lines(density(dname[[3]][,1]), col = 'green')
legend('topright',legend = c('Season1', 'Season2', 'Season3'), col=c("red", "blue"), lty=1)
plot(density(matched[[1]][, 1]), col = 'red', main = 'After Matching', xlab = 'Wind Speed (m/s)')
lines(density(matched[[2]][,1]), col = 'blue')
lines(density(matched[[3]][,1]), col = 'green')
legend('topright',legend = c('Season1', 'Season2', 'Season3'), col=c("red", "blue"), lty=1)
Season1 = data1
Season1 = data1
Season2 = data2
Season3 = data3
use_data(Season1, Season2, Season3)
data1 = read.csv('F:/goldwind_averaged/Turbine34.csv')
data1 = read.csv('F:/goldwind_averaged/Turbine34.csv')
data2 = read.csv('F:/goldwind_averaged/Turbine50.csv')
dname = rep(list(), 2)
dname[[1]] = data1
dname[[2]] = data2
View(data1)
# Non circular covariates column
cov = c(1, 6, 13)
# Weight
weight = c(0.1, 0.1, 0.05)
# Matching
matched = covmatch.binary(dname = dname, weight = weight, cov = cov, cov_circ = NULL)
# Commpare result of one covariate with original data
par(mfrow =  c(1, 2))
par(bg = 'grey')
plot(density(dname[[1]][, 1]), col = 'red', main = 'Before Matching', xlab = 'Wind Speed (m/s)')
lines(density(dname[[2]][,1]), col = 'blue')
plot(density(matched[[1]][, 1]), col = 'red', main = 'After Matching', xlab = 'Wind Speed (m/s)')
lines(density(matched[[2]][,1]), col = 'blue')
lines(density(matched[[3]][,1]), col = 'green')
plot(density(dname[[1]][, 6]), col = 'red', main = 'Before Matching', xlab = 'Wind Speed (m/s)')
lines(density(dname[[2]][,6]), col = 'blue')
plot(density(matched[[1]][, 6]), col = 'red', main = 'After Matching', xlab = 'Wind Speed (m/s)')
lines(density(matched[[2]][,6]), col = 'blue')
plot(density(dname[[1]][, 13]), col = 'red', main = 'Before Matching', xlab = 'Wind Speed (m/s)')
lines(density(dname[[2]][,13]), col = 'blue')
plot(density(matched[[1]][, 13]), col = 'red', main = 'After Matching', xlab = 'Wind Speed (m/s)')
lines(density(matched[[2]][,13]), col = 'blue')
# Weight
weight = c(0.1, 0.1, 0.02)
# Matching
matched = covmatch.binary(dname = dname, weight = weight, cov = cov, cov_circ = NULL)
# Commpare result of one covariate with original data
par(mfrow =  c(1, 2))
par(bg = 'grey')
plot(density(dname[[1]][, 13]), col = 'red', main = 'Before Matching', xlab = 'Wind Speed (m/s)')
lines(density(dname[[2]][,13]), col = 'blue')
legend('topright',legend = c('Season1', 'Season2', 'Season3'), col=c("red", "blue"), lty=1)
plot(density(matched[[1]][, 13]), col = 'red', main = 'After Matching', xlab = 'Wind Speed (m/s)')
lines(density(matched[[2]][,13]), col = 'blue')
# Non circular covariates column
cov = c(6, 1, 13)
# Weight
weight = c(0.1, 0.1, 0.05)
# Matching
matched = covmatch.binary(dname = dname, weight = weight, cov = cov, cov_circ = NULL)
# Commpare result of one covariate with original data
par(mfrow =  c(1, 2))
par(bg = 'grey')
plot(density(dname[[1]][, 13]), col = 'red', main = 'Before Matching', xlab = 'Wind Speed (m/s)')
lines(density(dname[[2]][,13]), col = 'blue')
legend('topright',legend = c('Season1', 'Season2', 'Season3'), col=c("red", "blue"), lty=1)
plot(density(matched[[1]][, 13]), col = 'red', main = 'After Matching', xlab = 'Wind Speed (m/s)')
lines(density(matched[[2]][,13]), col = 'blue')
data1 = read.csv('F:/goldwind_averaged/Turbine35.csv')
data2 = read.csv('F:/goldwind_averaged/Turbine50.csv')
dname = rep(list(), 2)
dname[[1]] = data1
dname[[2]] = data2
# Prepare data set for matching
dname = rep(list(), 3)
dname[[1]] = data1
dname[[2]] = data2
# Non circular covariates column
cov = c(6, 1, 13)
# Weight
weight = c(0.1, 0.1, 0.05)
# Matching
matched = covmatch.binary(dname = dname, weight = weight, cov = cov, cov_circ = NULL)
# Commpare result of one covariate with original data
par(mfrow =  c(1, 2))
par(bg = 'grey')
plot(density(dname[[1]][, 13]), col = 'red', main = 'Before Matching', xlab = 'Wind Speed (m/s)')
lines(density(dname[[2]][,13]), col = 'blue')
legend('topright',legend = c('Season1', 'Season2', 'Season3'), col=c("red", "blue"), lty=1)
plot(density(matched[[1]][, 13]), col = 'red', main = 'After Matching', xlab = 'Wind Speed (m/s)')
lines(density(matched[[2]][,13]), col = 'blue')
data1 = read.csv('F:/goldwind_averaged/Turbine34.csv')
data2 = read.csv('F:/goldwind_averaged/Turbine50.csv')
dname = rep(list(), 2)
dname[[1]] = data1
dname[[2]] = data2
# Prepare data set for matching
dname = rep(list(), 3)
dname[[1]] = data1
dname[[2]] = data2
# Non circular covariates column
cov = c(6, 1, 13)
# Weight
weight = c(0.1, 0.1, 0.05)
# Matching
matched = covmatch.binary(dname = dname, weight = weight, cov = cov, cov_circ = NULL)
# Commpare result of one covariate with original data
par(mfrow =  c(1, 2))
par(bg = 'grey')
plot(density(dname[[1]][, 13]), col = 'red', main = 'Before Matching', xlab = 'Turbulence Intensity')
lines(density(dname[[2]][,13]), col = 'blue')
legend('topright',legend = c('data1', 'data2'), col=c("red", "blue"), lty=1)
plot(density(matched[[1]][, 13]), col = 'red', main = 'After Matching', xlab = 'Turbulence Intensity')
lines(density(matched[[2]][,13]), col = 'blue')
legend('topright',legend = c('data1', 'data2'), col=c("red", "blue"), lty=1)
data1 = read.csv('F:/goldwind_averaged/Turbine61.csv')
data2 = read.csv('F:/goldwind_averaged/Turbine50.csv')
dname = rep(list(), 2)
dname[[1]] = data1
dname[[2]] = data2
# Prepare data set for matching
dname = rep(list(), 3)
dname[[1]] = data1
dname[[2]] = data2
# Non circular covariates column
cov = c(6, 1, 13)
# Weight
weight = c(0.1, 0.1, 0.05)
# Matching
matched = covmatch.binary(dname = dname, weight = weight, cov = cov, cov_circ = NULL)
# Commpare result of one covariate with original data
par(mfrow =  c(1, 2))
par(bg = 'grey')
plot(density(dname[[1]][, 13]), col = 'red', main = 'Before Matching', xlab = 'Turbulence Intensity')
lines(density(dname[[2]][,13]), col = 'blue')
legend('topright',legend = c('data1', 'data2'), col=c("red", "blue"), lty=1)
plot(density(matched[[1]][, 13]), col = 'red', main = 'After Matching', xlab = 'Turbulence Intensity')
lines(density(matched[[2]][,13]), col = 'blue')
plot(density(dname[[1]][, 13]), col = 'red', main = 'Before Matching', xlab = 'Turbulence Intensity')
lines(density(dname[[2]][,13]), col = 'blue')
legend('topright',legend = c('data1', 'data2'), col=c("red", "blue"), lty=1, lwd = 2)
# Commpare result of one covariate with original data
par(mfrow =  c(1, 2))
par(bg = 'grey')
plot(density(dname[[1]][, 13]), col = 'red', main = 'Before Matching', xlab = 'Turbulence Intensity', lwd = 2)
lines(density(dname[[2]][,13]), col = 'blue', lwd = 2)
legend('topright',legend = c('data1', 'data2'), col=c("red", "blue"), lty=1, lwd = 2)
plot(density(dname[[1]][, 13]), col = 'red', main = 'Before Matching', xlab = 'Turbulence Intensity', lwd = 2)
lines(density(dname[[2]][,13]), col = 'blue', lwd = 2)
legend('topright',legend = c('data1', 'data2'), col=c("red", "blue"), lty=1, lwd = 2)
# Commpare result of one covariate with original data
par(mfrow =  c(1, 2))
par(bg = 'grey')
plot(density(dname[[1]][, 13]), col = 'red', main = 'Before Matching', xlab = 'Turbulence Intensity', lwd = 2)
lines(density(dname[[2]][,13]), col = 'blue', lwd = 2)
legend('topright',legend = c('data1', 'data2'), col=c("red", "blue"), lty=1, lwd = 2)
plot(density(matched[[1]][, 13]), col = 'red', main = 'After Matching', xlab = 'Turbulence Intensity', lwd = 2)
lines(density(matched[[2]][,13]), col = 'blue', lwd = 2)
# Commpare result of one covariate with original data
par(mfrow =  c(1, 2))
par(bg = 'grey')
plot(density(dname[[1]][, 13]), col = 'red', main = 'Before Matching', xlab = 'Turbulence Intensity', lwd = 2)
lines(density(dname[[2]][,13]), col = 'blue', lwd = 2)
plot(density(dname[[1]][, 13]), col = 'red', main = 'Before Matching', xlab = 'Turbulence Intensity', lwd = 2, ylim = c(0, 8))
lines(density(dname[[2]][,13]), col = 'blue', lwd = 2, ylim = c(0, 8))
# Commpare result of one covariate with original data
par(mfrow =  c(1, 2))
par(bg = 'grey')
plot(density(dname[[1]][, 13]), col = 'red', main = 'Before Matching', xlab = 'Turbulence Intensity', lwd = 2, ylim = c(0, 8))
lines(density(dname[[2]][,13]), col = 'blue', lwd = 2, ylim = c(0, 8), ylim = c(0, 8))
legend('topright',legend = c('data1', 'data2'), col=c("red", "blue"), lty=1, lwd = 2)
plot(density(matched[[1]][, 13]), col = 'red', main = 'After Matching', xlab = 'Turbulence Intensity', lwd = 2, ylim = c(0, 8))
lines(density(matched[[2]][,13]), col = 'blue', lwd = 2, ylim = c(0, 8))
legend('topright',legend = c('data1', 'data2'), col=c("red", "blue"), lty=1, lwd = 2)
use_data(data1, data2)
library(WindPlus)
library(WindPlus)
help("covmatch.binary")
library(WindPlus)
library(WindPlus)
library(WindPlus)
library(WindPlus)
library(WindPlus)
library(WindPlus)
library(WindPlus)
library(WindPlus)
library(WindPlus)
library(WindPlus)
library(WindPlus)
library(WindPlus)
library(WindPlus)
remove.packages('WindPlus')
library(WindPlus)
library(WindPlus)
library(WindPlus)
# Load library
library(WindPlus)
# Prepare data set for matching
dname = rep(list(), 2)
dname[[1]] = data1
dname[[2]] = data2
# Non circular covariates column
cov = c(6, 1, 13)
# Weight
weight = c(0.1, 0.1, 0.05)
# Matching
matched = covmatch.binary(dname = dname, weight = weight, cov = cov, cov_circ = NULL)
# Commpare result of one covariate with original data
par(mfrow =  c(1, 2))
par(bg = 'grey')
plot(density(dname[[1]][, 13]), col = 'red', main = 'Before Matching', xlab = 'Turbulence Intensity', lwd = 2, ylim = c(0, 8))
lines(density(dname[[2]][,13]), col = 'blue', lwd = 2, ylim = c(0, 8), ylim = c(0, 8))
legend('topright',legend = c('data1', 'data2'), col=c("red", "blue"), lty=1, lwd = 2)
plot(density(matched[[1]][, 13]), col = 'red', main = 'After Matching', xlab = 'Turbulence Intensity', lwd = 2, ylim = c(0, 8))
lines(density(matched[[2]][,13]), col = 'blue', lwd = 2, ylim = c(0, 8))
legend('topright',legend = c('data1', 'data2'), col=c("red", "blue"), lty=1, lwd = 2)
library(WindPlus)
library(WindPlus)
# Prepare data set for matching
dname = rep(list(), 2)
dname[[1]] = data1
dname[[2]] = data2
# Non circular covariates column
cov = c(6, 1, 13)
# Weight
weight = c(0.1, 0.1, 0.05)
# Matching
matched = covmatch.binary(dname = dname, weight = weight, cov = cov, cov_circ = NULL)
# Commpare result of one covariate with original data
par(mfrow =  c(1, 2))
par(bg = 'grey')
plot(density(dname[[1]][, 13]), col = 'red', main = 'Before Matching', xlab = 'Turbulence Intensity', lwd = 2, xlim = c(0, 0.8), ylim = c(0, 8))
lines(density(dname[[2]][, 13]), col = 'blue', lwd = 2, ylim = c(0, 8), xlim = c(0, 0.8), ylim = c(0, 8))
legend('topright', legend = c('data1', 'data2'), col=c("red", "blue"), lty=1, lwd = 2)
plot(density(matched[[1]][, 13]), col = 'red', main = 'After Matching', xlab = 'Turbulence Intensity', lwd = 2, xlim = c(0, 0.8), ylim = c(0, 8))
lines(density(matched[[2]][,13]), col = 'blue', lwd = 2, xlim = c(0, 0.8), ylim = c(0, 8))
legend('topright', legend = c('data1', 'data2'), col=c("red", "blue"), lty=1, lwd = 2)
usethis::use_vignette('covariate matching')
usethis::use_vignette('covariate_matching')
library(WindPlus)
library(WindPlus)
library(WindPlus)
# Load library
library(WindPlus)
# Prepare data set for matching
dname = rep(list(), 2)
dname[[1]] = data1
dname[[2]] = data2
# Non circular covariates column
cov = c(6, 1, 13)
# Weight
weight = c(0.1, 0.1, 0.05)
# Matching
matched = covmatch.binary(dname = dname, weight = weight, cov = cov, cov_circ = NULL)
# Commpare result of one covariate with original data
par(mfrow =  c(1, 2))
par(bg = 'grey')
plot(density(dname[[1]][, 13]), col = 'red', main = 'Before Matching', xlab = 'Turbulence Intensity', lwd = 2, xlim = c(0, 0.8), ylim = c(0, 8))
lines(density(dname[[2]][, 13]), col = 'blue', lwd = 2, ylim = c(0, 8), xlim = c(0, 0.8), ylim = c(0, 8))
legend('topright', legend = c('data1', 'data2'), col=c("red", "blue"), lty=1, lwd = 2)
plot(density(matched[[1]][, 13]), col = 'red', main = 'After Matching', xlab = 'Turbulence Intensity', lwd = 2, xlim = c(0, 0.8), ylim = c(0, 8))
lines(density(matched[[2]][,13]), col = 'blue', lwd = 2, xlim = c(0, 0.8), ylim = c(0, 8))
legend('topright', legend = c('data1', 'data2'), col=c("red", "blue"), lty=1, lwd = 2)
library(WindPlus)
